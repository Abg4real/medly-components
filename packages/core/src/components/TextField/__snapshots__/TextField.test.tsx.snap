// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextField should handle with builtin form validation 1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c3::after {
  content: ' *';
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:invalid {
  caret-color: #cc0000;
  border-color: #cc0000;
  background-color: #FAE6E6;
}

.c1:invalid ~ .c2 {
  color: #cc0000;
}

.c1:invalid ~ .sc-AykKF * {
  fill: #cc0000;
}

.c1:invalid ~ .sc-AykKD {
  color: #cc0000;
}

.c1:invalid::-webkit-input-placeholder {
  color: rgba(204,0,0,.2);
}

.c1:invalid::-moz-placeholder {
  color: rgba(204,0,0,.2);
}

.c1:invalid:-ms-input-placeholder {
  color: rgba(204,0,0,.2);
}

.c1:invalid::placeholder {
  color: rgba(204,0,0,.2);
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      required=""
      type="email"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
      required=""
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField should render asterisk if we pass required prop as true 1`] = `
.c1 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1::after {
  content: ' *';
}

.c2:not(:placeholder-shown) + .c0,
.c2:focus + .c0 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c2 ~ .c0 {
  color: #566c82;
}

.c2:disabled ~ .c0 {
  color: #b0bcc8;
}

.c2:focus ~ .c0 {
  color: #005AEE;
}

<label
  class="c0 c1"
  for="medly-textField-input"
  required=""
>
  Name
</label>
`;

exports[`TextField should render properly with default props 1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField with filled variant should render default state properly 1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField with filled variant should render error state properly  1`] = `
.c5 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
  caret-color: #cc0000;
  border-color: #cc0000;
  background-color: #FAE6E6;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .c4 {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .c4 {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1 ~ .c2 {
  color: #cc0000;
}

.c1 ~ .sc-AykKF * {
  fill: #cc0000;
}

.c1 ~ .c4 {
  color: #cc0000;
}

.c1::-webkit-input-placeholder {
  color: rgba(204,0,0,.2);
}

.c1::-moz-placeholder {
  color: rgba(204,0,0,.2);
}

.c1:-ms-input-placeholder {
  color: rgba(204,0,0,.2);
}

.c1::placeholder {
  color: rgba(204,0,0,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <span
      class="c4 c5"
      id="medly-textField-helper-text"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with filled variant should render error text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c2 ~ .c0 {
  color: #566c82;
}

.c2:disabled ~ .c0 {
  color: #b0bcc8;
}

.c2 ~ .c0 {
  color: #cc0000;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
>
  Some text
</span>
`;

exports[`TextField with filled variant should render focus state properly  1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField with filled variant should render helper text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c2 ~ .c0 {
  color: #566c82;
}

.c2:disabled ~ .c0 {
  color: #b0bcc8;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
>
  Some text
</span>
`;

exports[`TextField with filled variant should render properly with prefix 1`] = `
.c4 {
  font-size: 2.4rem;
  cursor: inherit;
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
}

.c4 * {
  fill-opacity: 1;
  fill: #607890;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 5.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c6 {
  margin: 0;
  padding: 0;
  position: absolute;
  top: 50%;
  left: 1.6rem;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 5.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .c5 * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .c5 * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .c5 * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <svg
      class="c4 c5 c6"
      fill="none"
      height="1em"
      viewBox="0 0 24 24"
      width="1em"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.911 12.814l4.243 4.242M9.154 17.056l9.899-9.899"
        stroke="#000"
        stroke-linecap="round"
        stroke-width="2"
      />
    </svg>
    
  </div>
</div>
`;

exports[`TextField with filled variant should render properly with suffix 1`] = `
.c4 {
  font-size: 2.4rem;
  cursor: inherit;
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
}

.c4 * {
  fill-opacity: 1;
  fill: #607890;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c5 {
  margin: 0;
  padding: 0;
  position: absolute;
  top: 50%;
  right: 1.6rem;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 5.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.3rem;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  border: none;
  border-bottom: 0.1rem solid #566c82;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #566c82;
}

.c1 ~ .sc-AykKF * {
  fill: #566c82;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover,
.c1:not(:disabled):focus {
  padding-bottom: 0.5rem;
  border-bottom-width: 0.2rem;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: #F7F8F9;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: #e6effd;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::-moz-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus:-ms-input-placeholder {
  color: rgba(0,90,238,.2);
}

.c1:focus::placeholder {
  color: rgba(0,90,238,.2);
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <svg
      class="c4 c5"
      fill="none"
      height="1em"
      viewBox="0 0 24 24"
      width="1em"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.911 12.814l4.243 4.242M9.154 17.056l9.899-9.899"
        stroke="#000"
        stroke-linecap="round"
        stroke-width="2"
      />
    </svg>
    
  </div>
</div>
`;

exports[`TextField with outlined variant should render default state properly 1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.2rem;
  border-radius: 0.4rem;
  border: 1px solid #98A7B7;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #607890;
}

.c1 ~ .sc-AykKF * {
  fill: #607890;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover {
  border-color: #607890;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: transparent;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: transparent;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::-moz-placeholder {
  color: #C7D0D8;
}

.c1:focus:-ms-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::placeholder {
  color: #C7D0D8;
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField with outlined variant should render error state properly  1`] = `
.c5 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.2rem;
  border-radius: 0.4rem;
  border: 1px solid #98A7B7;
  caret-color: #cc0000;
  border-color: #cc0000;
  background-color: transparent;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #607890;
}

.c1 ~ .sc-AykKF * {
  fill: #607890;
}

.c1 ~ .c4 {
  color: #566c82;
}

.c1:not(:disabled):hover {
  border-color: #607890;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: transparent;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .c4 {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1 ~ .c2 {
  color: #cc0000;
}

.c1 ~ .sc-AykKF * {
  fill: #cc0000;
}

.c1 ~ .c4 {
  color: #cc0000;
}

.c1::-webkit-input-placeholder {
  color: #C7D0D8;
}

.c1::-moz-placeholder {
  color: #C7D0D8;
}

.c1:-ms-input-placeholder {
  color: #C7D0D8;
}

.c1::placeholder {
  color: #C7D0D8;
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <span
      class="c4 c5"
      id="medly-textField-helper-text"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with outlined variant should render error text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c2 ~ .c0 {
  color: #566c82;
}

.c2:disabled ~ .c0 {
  color: #b0bcc8;
}

.c2 ~ .c0 {
  color: #cc0000;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
>
  Some text
</span>
`;

exports[`TextField with outlined variant should render focus state properly  1`] = `
.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.2rem;
  border-radius: 0.4rem;
  border: 1px solid #98A7B7;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #607890;
}

.c1 ~ .sc-AykKF * {
  fill: #607890;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover {
  border-color: #607890;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: transparent;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: transparent;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::-moz-placeholder {
  color: #C7D0D8;
}

.c1:focus:-ms-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::placeholder {
  color: #C7D0D8;
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    
  </div>
</div>
`;

exports[`TextField with outlined variant should render helper text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 0 0 1.6rem;
}

.c2 ~ .c0 {
  color: #566c82;
}

.c2:disabled ~ .c0 {
  color: #b0bcc8;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
>
  Some text
</span>
`;

exports[`TextField with outlined variant should render properly with prefix 1`] = `
.c4 {
  font-size: 2.4rem;
  cursor: inherit;
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
}

.c4 * {
  fill-opacity: 1;
  fill: #607890;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 5.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c6 {
  margin: 0;
  padding: 0;
  position: absolute;
  top: 50%;
  left: 1.6rem;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 5.6rem;
  padding-right: 1.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.2rem;
  border-radius: 0.4rem;
  border: 1px solid #98A7B7;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #607890;
}

.c1 ~ .c5 * {
  fill: #607890;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover {
  border-color: #607890;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: transparent;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .c5 * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: transparent;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .c5 * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::-moz-placeholder {
  color: #C7D0D8;
}

.c1:focus:-ms-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::placeholder {
  color: #C7D0D8;
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <svg
      class="c4 c5 c6"
      fill="none"
      height="1em"
      viewBox="0 0 24 24"
      width="1em"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.911 12.814l4.243 4.242M9.154 17.056l9.899-9.899"
        stroke="#000"
        stroke-linecap="round"
        stroke-width="2"
      />
    </svg>
    
  </div>
</div>
`;

exports[`TextField with outlined variant should render properly with suffix 1`] = `
.c4 {
  font-size: 2.4rem;
  cursor: inherit;
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
}

.c4 * {
  fill-opacity: 1;
  fill: #607890;
}

.c3 {
  top: 0;
  left: 0;
  cursor: text;
  position: absolute;
  margin-left: 1.6rem;
  -webkit-transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  line-height: 2.6rem;
  -webkit-transform-origin: 0 0;
  -ms-transform-origin: 0 0;
  transform-origin: 0 0;
  touch-action: manipulation;
  -webkit-transform: translate3d(0,58%,0);
  -ms-transform: translate3d(0,58%,0);
  transform: translate3d(0,58%,0);
}

.c5 {
  margin: 0;
  padding: 0;
  position: absolute;
  top: 50%;
  right: 1.6rem;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c1 {
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  padding-bottom: 0.6rem;
  padding-left: 1.6rem;
  padding-right: 5.6rem;
  color: #13181D;
  font-size: 1.6rem;
  line-height: 2.6rem;
  cursor: text;
  box-sizing: border-box;
  -webkit-transition: all 100ms ease-out;
  transition: all 100ms ease-out;
  padding-top: 2.2rem;
  border-radius: 0.4rem;
  border: 1px solid #98A7B7;
}

.c1:focus {
  outline: none;
}

.c1:focus::-webkit-input-placeholder {
  opacity: 1;
}

.c1:focus::-moz-placeholder {
  opacity: 1;
}

.c1:focus:-ms-input-placeholder {
  opacity: 1;
}

.c1:focus::placeholder {
  opacity: 1;
}

.c1::-webkit-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::-moz-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:-ms-input-placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1::placeholder {
  opacity: 0;
  -webkit-transition: all 150ms ease-out;
  transition: all 150ms ease-out;
}

.c1:not(:placeholder-shown) + .c2,
.c1:focus + .c2 {
  -webkit-transform: translate3d(0,20%,0) scale(0.75);
  -ms-transform: translate3d(0,20%,0) scale(0.75);
  transform: translate3d(0,20%,0) scale(0.75);
}

.c1 ~ .c2 {
  color: #607890;
}

.c1 ~ .sc-AykKF * {
  fill: #607890;
}

.c1 ~ .sc-AykKD {
  color: #566c82;
}

.c1:not(:disabled):hover {
  border-color: #607890;
}

.c1:disabled {
  cursor: not-allowed;
  color: #435465;
  background-color: transparent;
  border-color: #C7D0D8;
}

.c1:disabled ~ .c2 {
  color: #b0bcc8;
}

.c1:disabled ~ .sc-AykKF * {
  fill: #b0bcc8;
}

.c1:disabled ~ .sc-AykKD {
  color: #b0bcc8;
}

.c1:disabled ~ * {
  cursor: not-allowed;
}

.c1:focus {
  border-color: #005AEE;
  background-color: transparent;
}

.c1:focus ~ .c2 {
  color: #005AEE;
}

.c1:focus ~ .sc-AykKF * {
  fill: #005AEE;
}

.c1:focus::-webkit-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::-moz-placeholder {
  color: #C7D0D8;
}

.c1:focus:-ms-input-placeholder {
  color: #C7D0D8;
}

.c1:focus::placeholder {
  color: #C7D0D8;
}

.c0 {
  position: relative;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

<div>
  <div
    class="c0"
  >
    <input
      aria-describedby="medly-textField-helper-text"
      class="c1"
      id="medly-textField-input"
      placeholder=" "
      type="text"
    />
    <label
      class="c2 c3"
      for="medly-textField-input"
    >
      Name
    </label>
    <svg
      class="c4 c5"
      fill="none"
      height="1em"
      viewBox="0 0 24 24"
      width="1em"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.911 12.814l4.243 4.242M9.154 17.056l9.899-9.899"
        stroke="#000"
        stroke-linecap="round"
        stroke-width="2"
      />
    </svg>
    
  </div>
</div>
`;
